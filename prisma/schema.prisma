generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  RESIDENT
  SERVICE_PROVIDER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  bio           String?
  location      String? // tol/neighborhood
  role          UserRole  @default(RESIDENT)
  isVerified    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  posts           Post[]
  comments        Comment[]
  jobs            Job[]
  jobApplications JobApplication[]
  polls           Poll[]
  votes           Vote[]
  messages        Message[]
  conversations   ConversationParticipant[]
  notifications   Notification[]
  events          AnalyticsEvent[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Post {
  id        String   @id @default(cuid())
  userId    String
  content   String   @db.Text
  imageUrls String[] @default([])
  location  String?
  createdAt DateTime @default(now())

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  content   String   @db.Text
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Job {
  id           String   @id @default(cuid())
  userId       String
  title        String
  description  String   @db.Text
  imageUrls    String[] @default([])
  category     String?
  location     String?
  isVerified   Boolean  @default(false)
  verifiedByAI Boolean  @default(false)
  createdAt    DateTime @default(now())

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications JobApplication[]
}

model JobApplication {
  id            String   @id @default(cuid())
  userId        String
  jobId         String
  coverLetter   String?  @db.Text
  workProofUrls String[] @default([])
  isApproved    Boolean  @default(false)
  verifiedByAI  Boolean  @default(false)
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  job  Job  @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model Poll {
  id        String    @id @default(cuid())
  userId    String
  question  String
  options   String[]
  expiresAt DateTime?
  createdAt DateTime  @default(now())

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  votes Vote[]
}

model Vote {
  id        String   @id @default(cuid())
  userId    String
  pollId    String
  option    String
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([userId, pollId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  title     String
  body      String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String                    @id @default(cuid())
  messages     Message[]
  participants ConversationParticipant[]
  createdAt    DateTime                  @default(now())
}

model ConversationParticipant {
  id             String @id @default(cuid())
  conversationId String
  userId         String

  user         User         @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@unique([conversationId, userId])
}

model Message {
  id             String   @id @default(cuid())
  conversationId String
  senderId       String
  content        String   @db.Text
  createdAt      DateTime @default(now())

  sender       User         @relation(fields: [senderId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
}

model AnalyticsEvent {
  id        String   @id @default(cuid())
  userId    String
  type      String
  metadata  Json
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
